# File: cli/Cargo.toml

[package]
# --- Package Metadata ---
# `name`: The name of the crate. This is used by Cargo and crates.io.
#       Conventionally, it's snake_case (e.g., `my_crate`).
name = "devrs"

# `version`: The current version of the crate, following Semantic Versioning (SemVer).
#       Format: MAJOR.MINOR.PATCH (e.g., 0.1.0, 1.0.0, 1.2.3).
#       Increment based on changes:
#       - MAJOR: Incompatible API changes.
#       - MINOR: Added functionality in a backward-compatible manner.
#       - PATCH: Backward-compatible bug fixes.
version = "0.2.0" # !IMPORTANT: Incremented version for blueprint functionality

# `edition`: The Rust edition to use for this crate. Editions introduce changes
#       to the language without breaking backward compatibility.
#       "2021" is the latest stable edition as of this writing.
edition = "2021"

# `description`: A short description of the crate, used by crates.io.
description = "ü¶Ä DevRS ‚öôÔ∏è: Containerized Development Environment & Tooling"

# `readme`: Path to the README file, displayed on crates.io.
#       Relative path from this Cargo.toml file.
readme = "../../README.md" # Assumes Cargo.toml is in cli/

# `license`: The license under which the crate is distributed (e.g., "MIT", "Apache-2.0", "MPL-2.0").
#       Use SPDX identifiers: https://spdx.org/licenses/
license = "MPL-2.0"

# `repository`: URL of the source code repository (optional but recommended).
repository = "https://github.com/christimahu/devrs" # Corrected repository URL

# `authors`: List of authors (optional). 
authors = ["Christi Mahu"] # Added author info


# --- Binary Definition ---
# Defines an executable binary target.
[[bin]]
# `name`: The name of the executable file generated (e.g., `devrs`).
name = "devrs"
# `path`: The path to the main source file for this binary.
path = "src/main.rs"


# --- Dependencies ---
# Libraries needed by this crate to compile and run.
# Format: `crate_name = "version"` or `crate_name = { version = "x.y.z", features = ["feature1", "feature2"] }`
[dependencies]
# === Core & CLI Framework ===
# `clap`: Powerful library for parsing command-line arguments.
#       `derive` feature enables procedural macros for easy struct-based argument parsing.
#       `env` feature enables reading default values from environment variables.
clap = { version = "4.4", features = ["derive", "env"] }
# `anyhow`: Flexible error handling library, simplifying error propagation with `Result`.
#       Good for application-level error handling where specific error types are less critical.
anyhow = "1.0"
# `thiserror`: Library for creating custom error types easily.
#       Useful for library code or when specific error handling is needed.
thiserror = "2.0"
# `serde`: Framework for serializing and deserializing Rust data structures efficiently.
#       `derive` feature enables automatic implementation for structs/enums.
serde = { version = "1.0", features = ["derive"] }
# `tokio`: Asynchronous runtime for Rust, providing async I/O, networking, timers, etc.
#       `full` feature enables all common Tokio features (convenient but increases compile time).
#       For the `srv` command, ensure `net` feature is enabled (included in 'full').
tokio = { version = "1.25", features = ["full"] } # Kept version 1.25 if that was specific
# `tracing`: Framework for application-level tracing and logging.
tracing = "0.1"
# `tracing-subscriber`: Utilities for implementing `tracing` subscribers (e.g., formatting, filtering).
#                       `env-filter` allows filtering logs via `RUST_LOG` env var.
#                       `fmt` provides log formatting capabilities.
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt"] }
# `chrono`: Library for date and time handling.
#       Required for blueprint create context.
#       `serde` feature enabled for serialization/deserialization if needed.
chrono = { version = "0.4", features = ["serde"] }

# === Configuration & Filesystem ===
# `toml`: Library for parsing TOML configuration files.
toml = "0.8"
# `shellexpand`: Expands shell variables like `~` in paths. Used in config loading.
shellexpand = "3.1"
# `dirs`: Provides platform-specific directory paths (e.g., home, config). Used in setup commands.
dirs = "6.0"
# `directories`: Find platform-specific user directories (config, cache etc). Used for config loading.
directories = "6.0"
# `walkdir`: Recursively walks directory trees. Useful for blueprints/templating.
walkdir = "2.4"
# `fs_extra`: Extra filesystem utilities (copying directories, etc.). Used in fsutils examples.
fs_extra = "1.3"
# `pathdiff`: Calculates relative paths between directories. Used in blueprint create message.
pathdiff = "0.2" # Added dependency


# === Docker Interaction ===
# `bollard`: Asynchronous Rust client library for the Docker API.
bollard = "0.18" # Or your current version


# === Templating ===
# `tera`: Powerful templating engine inspired by Jinja2/Django templates. Used for blueprints.
tera = "1.19"


# === HTTP Server (for srv command) ===
# `axum`: Ergonomic and modular web framework built with Tokio, Tower, and Hyper.
axum = "0.8"
# `tower-http`: Middleware and utilities for HTTP services built with Tower.
#       `fs`: For serving static files (`ServeDir`).
#       `trace`: For HTTP request/response tracing.
#       `cors`: For Cross-Origin Resource Sharing headers.
tower-http = { version = "0.6", features = ["fs", "trace", "cors"] }
# `tower`: Core library providing abstractions for network services and middleware.
#       Required by axum and tower-http. Explicitly added here to ensure
#       traits like `ServiceExt` (for `.map_err()`) are available.
#       Version should be compatible with `axum` and `tower-http`.
tower = { version = "0.5", features = ["util"] }


# === Testing Helpers (Used by Integration Tests) ===
# `assert_cmd`: Helper library for testing command-line applications.
assert_cmd = "2.0"
# `predicates`: Library for writing expressive assertions, often used with `assert_cmd`.
predicates = "3.0"

# === more for container build ===
futures-util = "0.3"
tar = "0.4"
flate2 = { version = "1.0", features = ["zlib"], default-features = false }

# Add other dependencies used throughout your cli crate here


# --- Development Dependencies ---
# Libraries needed only for running tests or benchmarks, not for the final binary.
[dev-dependencies]
# `tempfile`: Creates temporary files and directories for tests.
tempfile = "3.8"
