# === Root Cargo.toml for the devrs Workspace ===
# This file defines the overall structure and shared settings for the collection
# of crates (packages) that make up the DevRS project. Using a workspace is the
# standard Rust way to manage projects with multiple related crates, even if
# starting with just one (like our 'cli' crate).

# The [workspace] table defines the workspace configuration.
[workspace]
# The 'members' array lists the directories containing the crates managed by this workspace.
# Cargo commands run from the workspace root (here) can operate on these members.
members = [
    "cli", # The main command-line interface crate is currently the only member.
    # If we later extract core logic into a library, we would add "lib" here.
]

# Specifies the dependency resolver version. Version "2" is the latest
# and recommended version as of Rust 2021 edition. It enables newer Cargo
# features and often provides more efficient dependency resolution.
resolver = "2"

# The [workspace.dependencies] table allows defining shared dependencies
# for all crates within the workspace. Member crates (like 'cli') can inherit
# these exact versions using `dependency = { workspace = true }` in their own
# Cargo.toml's [dependencies] or [dev-dependencies] sections.
# This ensures version consistency across the entire project and simplifies updates.
[workspace.dependencies]
# --- Core Application Dependencies ---
anyhow = "1.0"      # Flexible error handling library, useful for application-level errors and adding context.
clap = { version = "4.5", features = ["derive", "cargo"] } # Powerful library for parsing command-line arguments using derive macros. "cargo" feature integrates with Cargo metadata (like version).
serde = { version = "1.0", features = ["derive"] } # Framework for serializing/deserializing Rust data structures (e.g., for config files). "derive" enables automatic implementation for structs/enums.
toml = "0.8"        # TOML format parsing library, used for loading configuration files (devrs.toml).
tokio = { version = "1", features = ["full"] } # Industry-standard async runtime for Rust. "full" feature enables all tokio utilities (IO, time, sync, macros, etc.). Needed for async operations like Docker API calls and the web server.
tracing = "0.1"     # Modern asynchronous tracing framework (structured logging).
tracing-subscriber = { version = "0.3", features = ["env-filter"] } # Collects and processes tracing data. "env-filter" allows controlling log levels via the RUST_LOG environment variable.
thiserror = "2.0"   # Crate for easily deriving the std::error::Error trait on custom enum-based errors (used in error.rs).

# --- Specific Functionality Dependencies ---
bollard = "0.18"    # Async Rust client library for interacting with the Docker Engine API. Essential for container/env management.
fs_extra = "1.3"    # Provides convenient, higher-level functions for filesystem operations like recursive copying (useful for setup/blueprints).
tera = "1.19"       # Jinja2-like templating engine for Rust. Used by the blueprint system to render project templates.
walkdir = "2"       # Utility for recursively walking directory trees. Useful for filesystem utils and blueprint processing.
axum = "0.8"        # Web application framework built with Tokio, Tower, and Hyper. Used for the `devrs srv` command.
tower-http = { version = "0.6", features = ["fs", "trace"] } # HTTP utility middleware for Tower services (used by Axum). "fs" for serving static files, "trace" for request logging in `devrs srv`.

# --- Development Dependencies (for tests across the workspace) ---
# These are only compiled and linked when running tests (`cargo test`) or benchmarks (`cargo bench`).
assert_cmd = "2.0"  # Crate for writing integration tests for command-line applications. Allows running the compiled binary and asserting on its output/status.
predicates = "3.1"  # Crate providing convenient assertion helpers (predicates) for tests, often used with assert_cmd to check command output.
tempfile = "3"      # Crate for creating temporary files and directories, useful for filesystem tests without cluttering the project.

