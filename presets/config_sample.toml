# === DevRS Configuration File (`presets/config.toml`) ===
# File: presets/config.toml
# Author: Christi Mahu
# Repository: https://github.com/christimahu/devrs
#
# Overview:
# This file, located in the `presets/` directory of the DevRS repository,
# serves as the **source** configuration for the user's setup.
# The `devrs setup all` command creates a symbolic link at the standard user
# configuration path (e.g., `~/.config/devrs/config.toml`) pointing back to *this file*.
# This ensures your user configuration stays synchronized with the repository's preset.
#
# Configuration Loading Precedence:
# 1. Project Config: Settings in `.devrs.toml` (in the current project directory
#    or ancestors) override settings from the user configuration.
# 2. User Config: The symlink (`~/.config/devrs/config.toml`) points here, providing
#    base settings.
# 3. Code Defaults: Hardcoded defaults are used if a setting is missing from both
#    project and user configurations.
#
# Customize this file within your cloned repository to set your preferred defaults.

# --- Core Development Environment Settings ---
# Configuration for the main container managed by `devrs env ...` commands.
[core_env]

# List of directories to mount from the host into the container.
# Use '~' for your home directory (it will be expanded by DevRS).
# Required fields: 'host', 'container'.
# Optional field: 'readonly' (defaults to false).
# These defaults assume you keep projects in ~/code and tools (like devrs source) in ~/tools.
mounts = [
  # Default: Mount project code directory (read-write typical)
  { host = "~/code", container = "/home/me/code", readonly = false },

  # Default: Mount tools directory (read-write, includes devrs source if cloned to ~/tools/devrs)
  # This allows accessing/editing devrs source from within the container at /home/me/tools/devrs.
  { host = "~/tools", container = "/home/me/tools", readonly = false },

  # Default: Mount SSH keys securely (read-only is highly recommended)
  # Necessary for Git operations over SSH from within the container.
  { host = "~/.ssh", container = "/home/me/.ssh", readonly = true },

  # Default: Mount Git configuration securely (read-only is highly recommended)
  # Ensures your Git user name/email are available in the container.
  { host = "~/.gitconfig", container = "/home/me/.gitconfig", readonly = true },

  # --- Optional Mount Examples (Uncomment and adjust as needed) ---

  # Example: Mount Cargo registry cache (speeds up Rust builds inside container)
  # Note: Performance may vary on macOS/Windows due to cross-OS filesystem mounting.
  # { host = "~/.cargo/registry", container = "/home/me/.cargo/registry", readonly = false },
  # Example: Mount Cargo git cache (speeds up Rust builds using git dependencies)
  # { host = "~/.cargo/git", container = "/home/me/.cargo/git", readonly = false },
  # Example: Mount pip cache for Python development
  # { host = "~/.cache/pip", container = "/home/me/.cache/pip", readonly = false },
  # Example: Mount npm cache for Node.js/JavaScript development
  # { host = "~/.npm", container = "/home/me/.npm", readonly = false },

  # Example: Mount standard Git templates directory (read-only recommended)
  # { host = "~/.git-templates", container = "/home/me/.git-templates", readonly = true },

  # Example: Mount Cloud Provider Credentials (read-only recommended)
  # { host = "~/.aws", container = "/home/me/.aws", readonly = true },
  # { host = "~/.config/gcloud", container = "/home/me/.config/gcloud", readonly = true },
  # { host = "~/.azure", container = "/home/me/.azure", readonly = true },

  # Example: Mount Docker Socket (USE WITH EXTREME CAUTION!)
  # Benefit: Allows running Docker commands (build, run, ps) inside the DevRS container
  #          to manage other containers or build application images directly.
  # Risk: SIGNIFICANT SECURITY IMPLICATION! Giving a container access to the host's
  #       Docker socket effectively grants it root-level access to the host system.
  #       If the DevRS container is compromised, the attacker gains full control.
  #       Only enable this if you fully understand and accept the risks involved.
  # { host = "/var/run/docker.sock", container = "/var/run/docker.sock", readonly = false },

  # Example: Mount specific project outside ~/code
  # { host = "/Volumes/WorkSSD/my_other_project", container = "/home/me/other_project", readonly = false },
]

# List of ports to map from the host machine to the container (HOST:CONTAINER format).
# Allows accessing services running inside the container (e.g., web servers, databases) from the host.
ports = [
  "8080:8080", # Example: Common Go/Java web app port
  "5173:5173", # Example: Default ViteJS port for web development
  "5000:5000", # Example: Common Python (Flask/Django debug) port
  # Add other ports like "5432:5432" for PostgreSQL if needed
]

# Environment variables to set inside the core development container.
# Useful for API keys, configuration flags, proxy settings, etc.
# Avoid committing secrets directly here; use project-specific .devrs.toml,
# dedicated secret management tools, or mount specific env files if necessary.
[core_env.env_vars]
# EXAMPLE_VAR = "example_value"
# RUST_LOG = "info,devrs=debug" # Example: Set default log level for Rust apps
# HTTP_PROXY = "http://proxy.example.com:8080" # Example proxy setting

# Default working directory when you enter the container using `devrs env shell`.
# Should usually be one of the container mount points defined above.
default_workdir = "/home/me/code" # Sensible default to start in project code

# Name for the core environment Docker image built by `devrs env build`.
# Matches the default defined in the code.
image_name = "devrs-core-env" #

# Tag for the core environment Docker image.
# Matches the default defined in the code.
image_tag = "latest" #


# --- Blueprint System Settings ---
# Configuration for the project scaffolding system (`devrs blueprint ...`).
[blueprints]

# Directory *relative to the DevRS repository root* where blueprint templates are stored.
# The `devrs setup all` command creates this entry when generating the initial presets/config.toml.
# This path is read by `devrs blueprint` commands running on the host.
directory = "~/tools/devrs/blueprints" 


# --- Application Container Defaults (Optional) ---
# Default settings applied when using `devrs container ...` commands,
# unless overridden by command-line arguments for those commands.
[application_defaults]

# Optional prefix to use when automatically generating image tags
# for `devrs container build` if no --tag is provided.
# Example: If prefix is "myapp" and current dir is "backend", default tag might be "myapp-backend:latest".
# default_image_prefix = "myorg"

# Optional default ports to map for `devrs container run` if no --port flags are given.
# default_ports = ["80:80"]


# --- Add other top-level configuration sections as needed ---
# Example: Maybe settings specific to the 'srv' command in the future
# [srv]
# default_port = 9000
